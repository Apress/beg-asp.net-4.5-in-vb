Imports System.Xml
Imports System.IO
Imports System.Collections.Generic

Partial Class XmlWriterTest
    Inherits System.Web.UI.Page

    Dim file As String
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        file = Path.Combine(Request.PhysicalApplicationPath, "App_Data\SuperProProductList_NoNamespace.xml")
    End Sub

    Protected Sub cmdCreateXml_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdCreateXml.Click
        Dim fs As New FileStream(File, FileMode.Create)
        Dim w As New XmlTextWriter(fs, Nothing)

        w.WriteStartDocument()
        w.WriteStartElement("SuperProProductList")
        w.WriteComment("This file generated by the XmlTextWriter class.")

        ' Write the first product.
        w.WriteStartElement("Product")
        w.WriteAttributeString("ID", "1")
        w.WriteAttributeString("Name", "Chair")

        w.WriteStartElement("Price")
        w.WriteString("49.33")
        w.WriteEndElement()

        w.WriteEndElement()

        ' Write the second product.
        w.WriteStartElement("Product")
        w.WriteAttributeString("ID", "2")
        w.WriteAttributeString("Name", "Car")

        w.WriteStartElement("Price")
        w.WriteString("43399.55")

        w.WriteEndElement()

        w.WriteEndElement()

        ' Write the third product.
        w.WriteStartElement("Product")
        w.WriteAttributeString("ID", "3")
        w.WriteAttributeString("Name", "Fresh Fruit Basket")

        w.WriteStartElement("Price")
        w.WriteString("49.99")
        w.WriteEndElement()

        w.WriteEndElement()

        ' Close the root element.
        w.WriteEndElement()
        w.WriteEndDocument()
        w.Close()

        lblXml.Text = "File " & file & " written successfully."
    End Sub

    Protected Sub cmdReadXml_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdReadXml.Click
        Dim fs As New FileStream(file, FileMode.Open)
        Dim r As New XmlTextReader(fs)

        ' Store the whole file in a StringWriter (much quicker than using
        ' string operations).
        Dim writer As New StringWriter()

        ' Parse the file, and read each node.
        Do While r.Read()
            writer.Write("<b>Type:</b> ")
            writer.Write(r.NodeType.ToString())
            writer.Write("<br />")

            If r.Name <> "" Then
                writer.Write("<b>Name:</b> ")
                writer.Write(r.Name)
                writer.Write("<br />")
            End If

            If r.Value <> "" Then
                writer.Write("<b>Value:</b> ")
                writer.Write(r.Value)
                writer.Write("<br />")
            End If

            If r.AttributeCount > 0 Then
                writer.Write("<b>Attributes:</b> ")
                For i As Integer = 0 To r.AttributeCount - 1
                    writer.Write("  ")
                    writer.Write(r.GetAttribute(i))
                    writer.Write("  ")
                Next
                writer.Write("<br />")
            End If

            writer.Write("<br />")
        Loop
        fs.Close()

        ' Copy the string content into a label to display it.
        lblXml.Text = writer.ToString()

    End Sub

    Protected Sub cdmReadXmlAsObjects_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cdmReadXmlAsObjects.Click
        ' Open a stream to the file.
        Dim fs As New FileStream(File, FileMode.Open)
        Dim r As New XmlTextReader(fs)

        Dim Products As New List(Of Product)()

        ' Loop through the products.
        Do While r.Read()

            If r.NodeType = XmlNodeType.Element And r.Name = "Product" Then
                Dim NewProduct As New Product()
                NewProduct.ID = Val(r.GetAttribute("ID"))
                NewProduct.Name = r.GetAttribute("Name")

                ' Get the rest of the subtags for this product.
                Do Until r.NodeType = XmlNodeType.EndElement
                    r.Read()

                    ' Look for Price subtags.
                    If r.Name = "Price" Then
                        Do Until (r.NodeType = XmlNodeType.EndElement)
                            r.Read()
                            If r.NodeType = XmlNodeType.Text Then
                                NewProduct.Price = Val(r.Value)
                            End If
                        Loop
                    End If

                    ' We could check for other Product nodes
                    ' (like Available, Status, etc.) here.
                Loop

                ' Add the product to the list.
                Products.Add(NewProduct)
            End If
        Loop

        fs.Close()

        ' Display the retrieved document.
        gridResults.DataSource = Products
        gridResults.DataBind()

    End Sub

    
End Class
